service: ljlabs

custom:
  env: ${file(env/vars.yml)}
  alerts:
    dashboards: true

plugins:
  - serverless-plugin-aws-alerts

provider:
  name: aws
  runtime: nodejs8.10
  region: us-east-1
  profile: serverless
  timeout: 300
  memorySize: 512
  stage: prod

package:
  individually: true
  excludeDevDependencies: false
  exclude:
    - node_modules/**
    - service/**

functions:
  trafficcop:
    memorySize: 128
    timeout: 5
    handler: service/trafficcop/handler.handler
    role: lambdaEdgeRole
    package:
      include:
        - service/trafficcop/handler.js
  watchdog:
    handler: service/watchdog/handler.handler
    role: lambdaRole
    environment:
      CHROMELESS_URI: ${self:custom.env.chromeless.uri}
      CHROMELESS_API_KEY: ${self:custom.env.chromeless.api_key}
      EMAIL_REPLY_DISPLAY_NAME: ${self:custom.env.email.reply_display_name}
      EMAIL_REPLY_ADDRESS: ${self:custom.env.email.reply_address}
      EMAIL_TO_ADDRESS: ${self:custom.env.email.to_address}
    package:
      include:
        - service/watchdog/handler.js
        - service/watchdog/lib/utils.js
        - service/watchdog/lib/watchdog.js
        - service/watchdog/lib/email.js
        - service/node_modules/**
    events:
      - schedule:
          rate: rate(5 minutes)
          enabled: true
          name: watchdog
    alarms: # merged with function alarms
      - name: watchdogAlarm # creates new alarm or overwrites some properties of the alarm (with the same name) from definitions
        namespace: 'AWS/Lambda'
        metric: errors # define custom metrics here
        threshold: 1
        statistic: Sum
        period: 1800
        evaluationPeriods: 1
        comparisonOperator: GreaterThanOrEqualToThreshold

resources:
  Resources:
    lambdaEdgeRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: LambdaEdgeRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
                  - edgelambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: lambdaEdgePolicyName
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                    - logs:DescribeLogStreams
                  Resource: "*"
    lambdaRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: LambdaRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: lambdaPolicyName
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                    - logs:DescribeLogStreams
                  Resource: "*"
                - Effect: Allow
                  Action: "ses:SendEmail"
                  Resource: "*"